#!/bin/bash

cd "$(cd $(dirname $0)/..; pwd)"

changed_files=y
if ls dist/sigenergy2mqtt-*-py3-none-any.whl >/dev/null 2>&1 && [[ $(find sigenergy2mqtt -newer $(ls -t dist/sigenergy2mqtt-*-py3-none-any.whl | head -n 1) -type f | wc -l) = 0 ]]; then
    changed_files=n
fi
if echo "$*" | grep -vqe "-f" && [[ $changed_files = n ]]; then
  echo "Build CANCELLED - no changed files found"
  exit
fi

python3 -c '
import asyncio
import logging
from test import instances
logging.getLogger("root").setLevel(logging.WARNING)
async def check():
    print("Checking sensors")
    await instances.get_sensor_instances(hass=True)
    await instances.get_sensor_instances(hass=False)
if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    loop.run_until_complete(check())
    instances.cancel_sensor_futures()
    loop.close()
' || exit

old_version=$(grep __version__ sigenergy2mqtt/config/version.py | cut -d'"' -f2)

if [[ $changed_files = n ]]; then
    new_version=$old_version
    post=$(echo $old_version | cut -d'-' -f2)
    if [[ $post =~ ^[0-9]+$ ]]; then
        pypi_version="$(echo $new_version | cut -d'-' -f1).post$post"
    else
        pypi_version=$old_version
    fi
else
    new_version=$(date +"%Y.%-m.%-d")
    pypi_version=$new_version
    if [[ $old_version =~ ^"$new_version" ]]; then
        post=$(echo $old_version | cut -d'-' -f2)
        if [[ $post =~ ^[0-9]+$ ]]; then
            pypi_version="${new_version}.post$((post + 1))"
            new_version="${new_version}-$((post + 1))"
        else
            pypi_version="${new_version}.post1"
            new_version="${new_version}-1"
        fi
    fi
    echo -e "Updating version from \033[1;32m$old_version\033[0m to \033[1;32m$new_version (PyPi=$pypi_version)\033[0m"
    sed -e "s/^__version__ = \".*\"/__version__ = \"$new_version\"/g" -i sigenergy2mqtt/config/version.py
fi

rm -f dist/*

python3 -m build || exit
python3 -m twine check dist/* || exit
if echo "$*" | grep -qe "docker"; then
    docker buildx build --output type=cacheonly --platform linux/amd64,linux/arm64 -t sigenergy2mqtt:latest . || exit
fi

if [[ -e ../home-assistant-addons/sigenergy2mqtt/config.yaml ]]; then
    echo -e "\033[1;32mUpdating add-on...\033[0m"
    mkdir -p ../home-assistant-addons/sigenergy2mqtt/rootfs/dist
    rm -f ../home-assistant-addons/sigenergy2mqtt/rootfs/dist/sigenergy2mqtt-*.whl
    cp -v dist/sigenergy2mqtt-${pypi_version}-py3-none-any.whl ../home-assistant-addons/sigenergy2mqtt/rootfs/dist/
    sed -e "s/^version: \".*\"/version: \"$new_version\"/g" -i ../home-assistant-addons/sigenergy2mqtt/config.yaml
    sed -e "s/sigenergy2mqtt-.*-py3/sigenergy2mqtt-${pypi_version}-py3/" -i ../home-assistant-addons/sigenergy2mqtt/Dockerfile
    if echo "$*" | grep -qe "docker"; then
        docker rmi $(docker images --filter=reference='local/home-assistant-addon-sigenergy2mqtt-amd64:*' -q)
        docker run --rm -it --privileged -v ../home-assistant-addons/sigenergy2mqtt:/data -v /var/run/docker.sock:/var/run/docker.sock:ro ghcr.io/home-assistant/amd64-builder:latest --target /data --test --no-latest -d local --amd64 || exit
    fi
fi

python3 sigenergy2mqtt/sensors/__update_readme.py

echo -e "\033[1;32mBuild successful\033[0m"
echo -e "New version: \033[1;32m$new_version\033[0m"
echo -e "PyPi version: \033[1;32m$pypi_version\033[0m"
